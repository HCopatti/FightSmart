// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int             @id @default(autoincrement())
  username        String
  email           String          @unique
  password        String
  birthDate       DateTime
  graduationBelt  String?
  degree          Int? 
  phone           String?
  photo           String?
  // isStudent       Boolean // Opcional, a existência do perfil já indica o tipo
  // isTeacher       Boolean // Opcional, a existência do perfil já indica o tipo
  student         StudentProfile?
  teacher         TeacherProfile?
}

model StudentProfile {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int       @unique
  classes   Class[]   @relation("StudentClasses")
}

model TeacherProfile {
  id          Int     @id @default(autoincrement())
  user        User    @relation(fields: [userId], references: [id])
  userId      Int     @unique
  academy     Academy @relation(fields: [academyId], references: [id]) // Relacionamento com a academia
  academyId   Int
  classes     Class[]   // aulas que o professor ministra
}

model Academy {
  id        Int             @id @default(autoincrement())
  name      String          @unique // O nome da academia deve ser único para o "upsert" funcionar
  address   String?
  teachers  TeacherProfile[] // Uma academia pode ter vários professores
  classes   Class[]
}

model Class {
  id          Int             @id @default(autoincrement())
  name        String
  dayOfWeek   Int
  startTime   String
  endTime     String?
  brief       String?
  teacher     TeacherProfile  @relation(fields: [teacherId], references: [id])
  teacherId   Int
  academy     Academy         @relation(fields: [academyId], references: [id])
  academyId   Int
  students    StudentProfile[] @relation("StudentClasses")
  date          DateTime
}
